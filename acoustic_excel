import os
import librosa
import pandas as pd
import numpy as np

# Define paths
base_path = 'all_audio'
categories = ['acoustic', 'non-acoustic']

# List to store features and labels
data = []

# Function to extract features
def extract_features(file_path):
    y, sr = librosa.load(file_path, sr=None)

    # MFCC features
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    mfcc_median = np.median(mfcc.T, axis=0)
    mfcc_std = np.std(mfcc.T, axis=0)

    # Chroma
    chroma = librosa.feature.chroma_stft(y=y, sr=sr)
    chroma_median = np.median(chroma.T, axis=0)
    chroma_std = np.std(chroma.T, axis=0)

    # Mel-spectrogram
    mel = librosa.feature.melspectrogram(y=y, sr=sr)
    mel_median = np.median(mel.T, axis=0)
    mel_std = np.std(mel.T, axis=0)

    # Spectral Centroid
    spectral_centroid = librosa.feature.spectral_centroid(y=y, sr=sr)
    spectral_cent_median = np.median(spectral_centroid)
    spectral_cent_std = np.std(spectral_centroid)

    # Spectral Rolloff
    spectral_rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)
    spectral_rolloff_median = np.median(spectral_rolloff)
    spectral_rolloff_std = np.std(spectral_rolloff)

    # Spectral Contrast (reduced to 1 median and 1 std)
    spectral_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)
    spectral_contrast_median = np.median(spectral_contrast)
    spectral_contrast_std = np.std(spectral_contrast)

    # Zero Crossing Rate
    zcr = librosa.feature.zero_crossing_rate(y=y)
    zcr_median = np.median(zcr)
    zcr_std = np.std(zcr)

    # Combine all features
    feature_vector = np.hstack([
        mfcc_median, mfcc_std,
        chroma_median, chroma_std,
        mel_median, mel_std,
        [spectral_cent_median, spectral_cent_std],
        [spectral_rolloff_median, spectral_rolloff_std],
        [spectral_contrast_median, spectral_contrast_std],
        [zcr_median, zcr_std]
    ])

    return feature_vector

# Generate column names
mfcc_cols = [f'mfcc{i+1}_median' for i in range(13)] + [f'mfcc{i+1}_std' for i in range(13)]
chroma_cols = [f'chroma{i+1}_median' for i in range(12)] + [f'chroma{i+1}_std' for i in range(12)]
mel_cols = [f'mel{i+1}_median' for i in range(128)] + [f'mel{i+1}_std' for i in range(128)]
spectral_cols = ['spectral_centroid_median', 'spectral_centroid_std',
                 'spectral_rolloff_median', 'spectral_rolloff_std']
contrast_cols = ['spectral_contrast_median', 'spectral_contrast_std']
zcr_cols = ['zcr_median', 'zcr_std']

columns = ['filename'] + mfcc_cols + chroma_cols + mel_cols + spectral_cols + contrast_cols + zcr_cols + ['label']

# Process files
for category in categories:
    folder_path = os.path.join(base_path, category)
    for filename in os.listdir(folder_path):
        if filename.lower().endswith('.wav'):
            file_path = os.path.join(folder_path, filename)
            try:
                features = extract_features(file_path)
                row = [filename] + features.tolist() + [category]
                data.append(row)
            except Exception as e:
                print(f"Error processing {file_path}: {e}")

# Save to Excel
if data:
    df = pd.DataFrame(data, columns=columns)
    df.to_excel("uditt_excel.xlsx", index=False)
    print("✅ Feature extraction complete. Saved to 'uditt_excel.xlsx'.")
else:
    print("❌ No data extracted.")
